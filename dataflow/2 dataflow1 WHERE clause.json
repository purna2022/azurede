{
	"name": "2 dataflow1 WHERE clause",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_dataflow_cld_emp",
						"type": "DatasetReference"
					},
					"name": "EMP"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EMPNO as decimal(4,0),",
				"          ENAME as string,",
				"          JOB as string,",
				"          MGR as decimal(4,0),",
				"          HIREDATE as timestamp,",
				"          SAL as decimal(7,2),",
				"          COMM as decimal(7,2),",
				"          DEPTNO as decimal(2,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> EMP",
				"source(output(",
				"          EMPNO as string,",
				"          ENAME as string,",
				"          JOB as string,",
				"          MGR as string,",
				"          HIREDATE as string,",
				"          SAL as string,",
				"          COMM as string,",
				"          DEPTNO as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          EMPNO as string,",
				"          ENAME as string,",
				"          JOB as string,",
				"          MGR as string,",
				"          HIREDATE as string,",
				"          SAL as string,",
				"          COMM as string,",
				"          DEPTNO as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"EMP filter(DEPTNO==30) ~> filter1",
				"source1 sort(asc(ENAME, true)) ~> sort1",
				"split1@dept10 keyGenerate(output({Row Num} as long),",
				"     startAt: 1L,",
				"     stepValue: 2L) ~> surrogateKey1",
				"source2 split(DEPTNO=='10',",
				"     DEPTNO=='20',",
				"     disjoint: false) ~> split1@(dept10, dept20)"
			]
		}
	}
}